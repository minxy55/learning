// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#ifndef PROTOBUF_logrecord_2eproto__INCLUDED
#define PROTOBUF_logrecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace logging {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logrecord_2eproto();
void protobuf_AssignDesc_logrecord_2eproto();
void protobuf_ShutdownFile_logrecord_2eproto();

class LogRecord;
class LogRecord_Heartbeat;

// ===================================================================

class LogRecord_Heartbeat : public ::google::protobuf::Message {
 public:
  LogRecord_Heartbeat();
  virtual ~LogRecord_Heartbeat();
  
  LogRecord_Heartbeat(const LogRecord_Heartbeat& from);
  
  inline LogRecord_Heartbeat& operator=(const LogRecord_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord_Heartbeat& default_instance();
  
  void Swap(LogRecord_Heartbeat* other);
  
  // implements Message ----------------------------------------------
  
  LogRecord_Heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecord_Heartbeat& from);
  void MergeFrom(const LogRecord_Heartbeat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string hostname = 1;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  
  // required string process_name = 2;
  inline bool has_process_name() const;
  inline void clear_process_name();
  static const int kProcessNameFieldNumber = 2;
  inline const ::std::string& process_name() const;
  inline void set_process_name(const ::std::string& value);
  inline void set_process_name(const char* value);
  inline void set_process_name(const char* value, size_t size);
  inline ::std::string* mutable_process_name();
  inline ::std::string* release_process_name();
  
  // required int32 process_id = 3;
  inline bool has_process_id() const;
  inline void clear_process_id();
  static const int kProcessIdFieldNumber = 3;
  inline ::google::protobuf::int32 process_id() const;
  inline void set_process_id(::google::protobuf::int32 value);
  
  // required int64 process_start_time = 4;
  inline bool has_process_start_time() const;
  inline void clear_process_start_time();
  static const int kProcessStartTimeFieldNumber = 4;
  inline ::google::protobuf::int64 process_start_time() const;
  inline void set_process_start_time(::google::protobuf::int64 value);
  
  // required string username = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // @@protoc_insertion_point(class_scope:logging.LogRecord.Heartbeat)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_process_name();
  inline void clear_has_process_name();
  inline void set_has_process_id();
  inline void clear_has_process_id();
  inline void set_has_process_start_time();
  inline void clear_has_process_start_time();
  inline void set_has_username();
  inline void clear_has_username();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hostname_;
  ::std::string* process_name_;
  ::google::protobuf::int64 process_start_time_;
  ::std::string* username_;
  ::google::protobuf::int32 process_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_logrecord_2eproto();
  friend void protobuf_AssignDesc_logrecord_2eproto();
  friend void protobuf_ShutdownFile_logrecord_2eproto();
  
  void InitAsDefaultInstance();
  static LogRecord_Heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class LogRecord : public ::google::protobuf::Message {
 public:
  LogRecord();
  virtual ~LogRecord();
  
  LogRecord(const LogRecord& from);
  
  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord& default_instance();
  
  void Swap(LogRecord* other);
  
  // implements Message ----------------------------------------------
  
  LogRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LogRecord_Heartbeat Heartbeat;
  
  // accessors -------------------------------------------------------
  
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  inline bool has_heartbeat() const;
  inline void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 1;
  inline const ::logging::LogRecord_Heartbeat& heartbeat() const;
  inline ::logging::LogRecord_Heartbeat* mutable_heartbeat();
  inline ::logging::LogRecord_Heartbeat* release_heartbeat();
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required int32 thread_id = 3;
  inline bool has_thread_id() const;
  inline void clear_thread_id();
  static const int kThreadIdFieldNumber = 3;
  inline ::google::protobuf::int32 thread_id() const;
  inline void set_thread_id(::google::protobuf::int32 value);
  
  // required int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // required string message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:logging.LogRecord)
 private:
  inline void set_has_heartbeat();
  inline void clear_has_heartbeat();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_thread_id();
  inline void clear_has_thread_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::logging::LogRecord_Heartbeat* heartbeat_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 thread_id_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_logrecord_2eproto();
  friend void protobuf_AssignDesc_logrecord_2eproto();
  friend void protobuf_ShutdownFile_logrecord_2eproto();
  
  void InitAsDefaultInstance();
  static LogRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// LogRecord_Heartbeat

// required string hostname = 1;
inline bool LogRecord_Heartbeat::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecord_Heartbeat::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecord_Heartbeat::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecord_Heartbeat::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& LogRecord_Heartbeat::hostname() const {
  return *hostname_;
}
inline void LogRecord_Heartbeat::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void LogRecord_Heartbeat::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void LogRecord_Heartbeat::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord_Heartbeat::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* LogRecord_Heartbeat::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string process_name = 2;
inline bool LogRecord_Heartbeat::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecord_Heartbeat::set_has_process_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecord_Heartbeat::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecord_Heartbeat::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& LogRecord_Heartbeat::process_name() const {
  return *process_name_;
}
inline void LogRecord_Heartbeat::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void LogRecord_Heartbeat::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void LogRecord_Heartbeat::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord_Heartbeat::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  return process_name_;
}
inline ::std::string* LogRecord_Heartbeat::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 process_id = 3;
inline bool LogRecord_Heartbeat::has_process_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecord_Heartbeat::set_has_process_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecord_Heartbeat::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecord_Heartbeat::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
inline ::google::protobuf::int32 LogRecord_Heartbeat::process_id() const {
  return process_id_;
}
inline void LogRecord_Heartbeat::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
}

// required int64 process_start_time = 4;
inline bool LogRecord_Heartbeat::has_process_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRecord_Heartbeat::set_has_process_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRecord_Heartbeat::clear_has_process_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRecord_Heartbeat::clear_process_start_time() {
  process_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_process_start_time();
}
inline ::google::protobuf::int64 LogRecord_Heartbeat::process_start_time() const {
  return process_start_time_;
}
inline void LogRecord_Heartbeat::set_process_start_time(::google::protobuf::int64 value) {
  set_has_process_start_time();
  process_start_time_ = value;
}

// required string username = 5;
inline bool LogRecord_Heartbeat::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRecord_Heartbeat::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRecord_Heartbeat::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRecord_Heartbeat::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LogRecord_Heartbeat::username() const {
  return *username_;
}
inline void LogRecord_Heartbeat::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LogRecord_Heartbeat::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LogRecord_Heartbeat::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord_Heartbeat::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LogRecord_Heartbeat::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LogRecord

// optional .logging.LogRecord.Heartbeat heartbeat = 1;
inline bool LogRecord::has_heartbeat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecord::set_has_heartbeat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecord::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecord::clear_heartbeat() {
  if (heartbeat_ != NULL) heartbeat_->::logging::LogRecord_Heartbeat::Clear();
  clear_has_heartbeat();
}
inline const ::logging::LogRecord_Heartbeat& LogRecord::heartbeat() const {
  return heartbeat_ != NULL ? *heartbeat_ : *default_instance_->heartbeat_;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::mutable_heartbeat() {
  set_has_heartbeat();
  if (heartbeat_ == NULL) heartbeat_ = new ::logging::LogRecord_Heartbeat;
  return heartbeat_;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::release_heartbeat() {
  clear_has_heartbeat();
  ::logging::LogRecord_Heartbeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}

// required int32 level = 2;
inline bool LogRecord::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecord::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecord::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecord::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LogRecord::level() const {
  return level_;
}
inline void LogRecord::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 thread_id = 3;
inline bool LogRecord::has_thread_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecord::set_has_thread_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecord::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecord::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
inline ::google::protobuf::int32 LogRecord::thread_id() const {
  return thread_id_;
}
inline void LogRecord::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
}

// required int64 timestamp = 4;
inline bool LogRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 LogRecord::timestamp() const {
  return timestamp_;
}
inline void LogRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string message = 5;
inline bool LogRecord::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRecord::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRecord::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRecord::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& LogRecord::message() const {
  return *message_;
}
inline void LogRecord::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogRecord::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void LogRecord::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRecord::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* LogRecord::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logrecord_2eproto__INCLUDED
